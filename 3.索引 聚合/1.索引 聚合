补充
    通过find查找结果，可以使用序列号获取具体某一项
    示例
        获取查找结果中的第二项
        db.class.find({},{_id:0, hobby:0})[1]


### 修改操作符(修改器)

    $set
        修改一个域的值

        当文档中不存在的时候会自动增加一个域

    $unset
        删除一个域

    $rename
        将性别改成gender
            db.class.update({},{$rename:{sex:'gender'}},false,true)

    $setOnInsert
        如果使用update插入了文档，则将修改器内容作为插入文档的一部分
            db.class.update({name:'Jame'}, {$set:{age:18}, $setOnInsert:{gender:'男'}}, true)

    $inc
        加法修改器
            将所有年龄小于17的人的年龄加1
                db.class.update({age:{$lt:17}},{$inc:{age:1}}, false, true)

    $mul
        乘法修改器
            将所有年龄乘以两倍
                db.class.update({},{$mul:{age:2}},false,true)

    $min
        如果筛选文档的指定域值小于min值则不修改，大于min值则修改为min值
            所有人的如果年龄大于10则修改为10
                db.class.update({},{$min:{age:10}}, false,true)

    $max
        如果筛选文档的指定域值大于max值则不修改，小于max值则修改为max值
            所有人的如果年龄小于15则修改为15
                db.class.update({},{$max:{age:15}}, false,true)

    数组修改器
    $push
        向数组中添加一项
             db.class1.update({name:'小红'},{$push:{score:100}})

    $pushAll
        向数组中添加多项
            db.class1.update({name:'小乔'},{$pushAll:{score:[100,99]}})

    $pull
        从数组中删除一项
            db.class1.update({name:'小红'},{$pull:{score:100}})

    $pullAll
        向数组中删除多项
            db.class1.update({name:'小乔'},{$pullAll:{score:[100,99]}})

    $each
        对多个值逐个进行操作
            分别插入99，10
            db.class1.update({name:'小乔'},{$push:{socre:{$each:[99, 10]}}})

    $position
        指定插入位置
            db.class1.update({name:'小明'},{$push:{score:{$each:[67], $position:1}}})

    $sort
        数组排序
        将含有score的文档score数组排序
            db.class1.update({},{$push:{score:{$each:[],$sort:1}}}, false, true)
    $pop
        弹出一项
            1表示弹出最后一项，-1表示弹出第一项

            弹出小乔的最后一项
                db.class1.update({name:'小乔'},{$pop:{score:1}})

    $addToSet
        向数组中添加一项，但是不能添加重复的内容
            给小刚添加一项,如果数组中有88则不添加
                db.class1.update({name:'小刚'}, {$addToSet:{score:88}})


###　时间数据类型
    mongo中存储时间大多为ISODate
    存储当前时间方法
        1. new Date()
            自动生成当前时间
                db.class2.insert({book:'Python入门', date:new Date()})
        2. ISODate()
            自动生成当前时间
                db.class2.insert({book:'Python精通', date: ISODate()})

        3. Date()
            生成当前时间，将系统时间转化为字符串
                db.class2.insert({book:'Python疯狂', date: Date()})

    指定时间存储
        ISODate()
            功能：生成mongo标准时间类型
            参数：不传参默认为当前时间
                传参表示指定时间
                    '2018-01-01 12:12:12'
                    '20180101 12:12:12'
                    '20180101'

                db.class2.insert({book:'Python崩溃', date: ISODate('2018-01-01 12:12:12')})

    时间戳
        valueOf()
        获取某个时间的时间戳
                db.class2.insert({book:'Python涅磐', date: ISODate().valueOf()})

    Null类型
        值null
        1. 如果某个域存在却没有值可以赋值为null
            db.class2.insert({book:'Python死去活来', price:null})
        2. 可以查找某个域不存在的情况
            db.class2.find({date:null})

    Object
        内部文档,文档对象类型
            文档内部某个域的值还是一个文档数据, 则这个文档内部就是文档类型数据
            db.class3.insert({_id:1, name:'鲁迅', sex:'男', book:{title:'狂人日记', price:46.8}})
            db.class3.insert({_id:2, name:'钱钟书', sex:'男', book:{title:'围城', price:46.8}})
            db.class3.insert({_id:3, name:'老舍', sex:'男', book:{title:'骆驼祥子', price:46.8}})
        通常使用 外部文档域名.引用内部文档域名
            db.class3.find({'book.title':'狂人日记'})
            db.class3.update({'book.title':'围城'}, {$set:{"book.price":48.8}})


    通过数组下标直接操作某一项
        db.class3.find({"array.0":{$gt: 60}})



练习
    1. 将小红年龄改为12岁,兴趣爱好变为跳舞画画
        db.exe.update({'name': '小红'}, {$set:{'hobby': ['跳舞', '画画']}})
    2. 追加小明爱好唱歌
        db.exe.update({'name':'小明'},{$push:{'hobby':'唱歌'}})
    3. 追加小王兴趣爱好吹牛,打篮球
        db.exe.update({'name':'小王'}, {$pushAll:{'hobby':['吹牛', '打篮球']}})
    4. 小李兴趣多了跑步和唱歌,但是要确保和以前不重复
        #db.exe.update({'name':'小李'}, {$addToSet:{$each:['唱歌', '跳舞']}})
    5. 将班级所有男同学年龄加1
        db.exe.update({sex:'男'}, {$inc:{age:1}}, false, true)
    6. 删除小明的sex属性
        db.exe.update({'name':'小明'},{$unset:{sex:''}})
    7. 修改小刘的年龄为15, 如果不存在该同学则添加,同时套添加兴趣爱好和性别男
        db.exe.update({'name':'小刘'},{$set:{age:15},$setOnInsert:{sex:'男', hobby:['跳舞']}})
    8. 删除小李兴趣中的第一项
        db.exe.update({'name':'小李'}, {$unset: {'hobby.0':''}})
    9. 删除小红爱好中画画和跳舞
        db.exe.update({'name':'小红'}, {$pullAll: {hobby:['画画','跳舞']}})

    db.exe.insert([
        {'name': '小红', 'age': 18, 'sex': '女', 'hobby': ['跳舞']},
        {'name': '小明', 'age': 17, 'sex': '男', 'hobby': []},
        {'name': '小王', 'age': 19, 'sex': '男', 'hobby': []},
        {'name': '小李', 'age': 18, 'sex': '男', 'hobby': ['唱歌']},
        {'name': '小刘', 'age': 16, 'sex': '男', 'hobby': ['唱歌']}
    ])


### 索引
    指建立指定键值及所在文档存储位置的对照清单,使用索引可以方便我们进行快速查找,减少遍历次数提高查找效率


    ensureIndex()
        功能
            创建索引
        参数
            索引域和索引选项
            1 表示正序索引
            -1 表示逆序索引

    根据name域创建索引
    db.exe.ensureIndex({name:1})

    查看集合中索引
        db.collection.getIndexes()

    自定义索引名称
        db.collection.ensureIndex({}, {name:'MyIndex'})
        对age域创建索引命名ageIndex
            db.exe.ensureIndex({age:1},{name:'ageIndex'})

    删除索引
        db.collection.dropIndex('index')
        功能
            删除索引
        参数
            要删除的索引名或键值对
        示例
            删除age索引
            db.exe.dropIndex({age:1})
            db.exe.dropIndex('name_1')

    删除所有索引
        db.collecction.dropIndexes()
        功能
            删除所有索引

    _id是系统自动创建的主键索引, 不能删除



### 其他的索引类型
    复合索引
        根据多个域创建一个索引,比单独创建索引表更省空间
        db.exe.ensureIndex({name:1, age:-1}, {name:'name_age'})

    数组索引,子文档索引
        如果对某个域的值为数组或者为子文档的域创建索引,那么通过数组或者子文档中某一项进行查找也是索引查找
        例如:
            如果多score创建了索引,那么该查找就是索引查找
            db.exe.find({'score.1':88})

    唯一索引
        创建索引的域要求值不能重复
            db.exe.ensureIndex({age:1},{unique:true})

    稀疏索引(间隙索引)
        只针对有指定索引域的文档创建索引,没有该域的文档不会插入到索引表
        例如
            只对有age域的文档创建索引
            db.exe.ensureIndex({age:1},{sparse:true})


### 索引约束
    * 索引表需要占用一定的数据库物理磁盘空间
    * 当对数据进行增删改等写入操作时索引也需要更新,降低了数据修改的效率

    综上:
        1. 数据量较小时不适合创建索引, 当数据库进行频繁的修改操作而不是查找操作时也不适合创建索引.
            针对一个集合并不是创建索引越多越好

### 聚合操作
    对文档的筛选结果进行整理统计
        db.collection.aggregate()
        功能
            完成集合操作
        参数
            聚合条件 ---> 聚合操作符

    聚合操作符
        $group  分组聚合
            需要配合具体的分组统计选项
            $sum 求和
                例如
                     db.exe.aggregate({$group:{_id:'$sex',num:{$sum:1}}})
                     db.exe.aggregate({$group:{_id:'$sex',num:{$sum:'$age'}}})

            $avg 求平均数
                例如
                    按性别分组,统计平均年龄
                        db.exe.aggregate({$group:{_id:'$sex',avg:{$avg:'$age'}}})

            $max 求最大值
                例如
                    按性别分组求年龄的最大值
                    db.exe.aggregate({$group:{_id:'$sex', max:{$max:'$age'}}})

            $min 求最小值
                例如
                    按性别分组求年龄的最小值
                    db.exe.aggregate({$group:{_id:'$sex', min:{$min:'$age'}}})

### $project
    修改文档的显示效果
    $project 值得用法和find函数field格式一致
        db.exe.aggregate({$project:{_id:0,name:1, age:1}})

        db.exe.aggregate({$project:{_id:0,Name:'$name',Age:'$age'}})

### $match
    数据筛选
        用法和query的用法一致
        筛选大于18岁的文档
        db.exe.aggregate({$match:{age:{$gt:18}}})

### $limit
    筛选前几条文档
        筛选到前三条数据
        db.exe.aggregate({$limit:3})


### $skip
    跳过几条文档显示
        db.exe.aggregate({$skip:3})

### $sort
    将数据排序
            db.exe.aggregate({$sort:{age:1}})


### 聚合管道
    将上一个聚合的操作结果给下一个聚合继续操作
        db.collection.aggregate([{聚合},{},{},{}])













