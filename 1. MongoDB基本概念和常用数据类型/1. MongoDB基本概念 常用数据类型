
MongoDB (芒果数据库)

数据的存储阶段

### 文件管理阶段(.txt .doc .xls)
    优点：
        使用简单，展现直观
        同时可以长期保存数据
        可存储数据量比较大

    缺点
        查找不方便，容易造成数据冗余
        数据格式不规范


### 数据库管理阶段
    优点
        将数据结构化存储，降低冗余
        提高了增删改查效率
        方便扩展，方便程序调用
    缺点
        数据库往往需要指令或语句操作，相对复杂


### 几个概念
    数据：
        能够输入到计算机中并被识别处理的信息的集合
    数据结构
        组成一个数据集合的数据之间的关系
    数据库
        按照一定的数据结构存储数据的仓库
        数据库是在数据库管理系统管理和控制下，在一定介质上的数据集合
    数据库管理系统
        数据库管理软件，用于建立维护操作数据库
    数据库系统
        由数据库和数据库管理系统等开发工具组成的集合


### 关系型数据库
    采用关系模型(二维表)来组织数据结构的数据库
    优点
        容易理解，逻辑类似常见的表格
        使用方便，都使用sql语句，sql语句非常成熟
        数据一致性高，冗余低，数据完整性好，便于操作
        普遍技术成熟，功能强大，支持很多复杂操作
    缺点
        １．每次操作都要进行sql语句的解析，消耗较大
        ２．不能很好的满足并发需求，特别是海量数据爆发，关系型数据库的读写能力会显的不足
        ３．关系型数据库往往每一步都要进行加锁的操作，也造成了数据库的负担
        ４．数据一致性高，有时也会使数据的存储不灵活


### 非关系型数据库（NoSql  <---> not only sql）
    优点：
        高并发，读写能力强
        弱化数据结构一致性，使用更加灵活，有良好的可扩展性
    缺点
        １．通用性差，没有sql语句那样通用的语句
        ２．操作灵活导致容易出错和混乱
        ３．没有外键关联等复杂的操作
        ４．版本更新特别快


### NoSql的使用情况
    1. 对数据存储灵活性高，一致性要求低
    2. 数据处理海量并发，要求瞬间效率速度比较高
    3. 数据比较容易建立NoSql模型
    4. 网站临时缓冲存储，爬虫应用


### NoSql的分类
   1. 键值型数据库
        Redis
   2. 文档型数据库
        MongoDB
   3. 列存储数据库
        HBase
   4. 图形数据库


### MongoDB数据库
    标签：　非关系型数据库　　文档型数据库　
           最像关系型的非关系型数据库
    特点
        1. 是由C++编写的数据库管理系统
        2. 支持丰富的数据操作，增删改查索引聚合
        3. 支持丰富的数据类型
        4. 使用方便，可以很好的扩展．相对比较成熟
        5. 支持更多的编程语言接口(python php c++ c#)

    ＊要求
        1. 关系型数据库和非关系型数据库各自有什么特点
        2. MongoDB是一个什么样的数据库


### MongoDB的安装
    1. 自动安装
        sudo apt-get intsall mongodb

        默认安装位置
            /var/lib/mongodb
        配置文件位置
            /etc/mongodb.conf
        命令集
            /usr/bin
            /usr/local/bin

    2. 手动安装
        1. 下载安装包
            https://www.mongodb.com/
        2. 解压安装包
            /usr/local    或 /opt
        3. 将解压后的mongodb文件夹中的bin目录添加到环境变量中
            PATH=$PATH:/opt/mong.../bin
            export PATH
            将以上两个写入启动脚本　/etc/rc.local
        4. 重启


###　MongoDB命令
    设置数据库存储位置
        mongod --dbpath 目录
        示例
            将路径设置为dbs
            mongo --dbpath dbs

    设置数据库监听端口
        mongod --port 8080
        ＊　默认监听端口27017

    进入数据库交互操作界面
        mongo　shell
            用来操作mongodb数据库的界面，在这里可以使用mongo语句操作数据库内容


### MongoDB中的组织结构
    键值对　---> 文档 ---> 集合 ---> 数据库


### MySql 和 MongoDB　概念对比

    MySql        MongoDB        含义
    database     database       数据库
    table        collection     表/集合
    column       field          字段/域
    row          document       记录/文档
    index        index          索引

### 创建数据库
    use databaseName
        例如：
            创建一个名字为stu的数据库
            use stu
        * use　实际为选择使用哪个数据库，当数据库不存在时则会自动创建
        * use 后并不会立即创建出数据库，而是需要等到插入数据时数据库才会创建

    show dbs
        查看系统中的数据库

    系统数据库说明
        admin: 存储用户系统
        local: 存储本地数据
        config: 存储分片信息

    数据库的命名规则
        1. 使用utf-8字符(mongo默认支持utf-8)
        2. 不能含有空格　. / \ '\0'  字符
        3. 长度不超过64字节
        4. 不能和系统数据库重名


### db: mongodb的全局量, 代表当前正在使用的数据库
＊　如果不选择使用任何数据库db代表test，直接插入数据就会建立test数据库


### 数据库的备份和恢复
    备份
        mongodump -h host -d dbname -o bak
        例如
            mongodump -h 127.0.0.1 -d test -o bak

    恢复
        mongorestore -h dbhost:port -d dbname path
        例如
            将test数据库恢复到本机的res数据库中（不存在则自动创建）
            mongorestore -h 127.0.0.1:27017 -d res bak/test

### 数据库的监测
    mongostat

    insert query update delete　   # 每秒增删改查的次数
    flushes  # 每秒和磁盘交互次数
    vsize  # 虚拟内存
    res  # 物理内存
    time  # 时间


### mongotop
    用来监测数据库读写时长
    ns 数据表
    total 总时间
    read 读时间
    write 写时间


### 删除数据库
    db.dropDatabase()
    删除db所代表的数据库


### 创建集合
    方法１
    　db.createCollection(collection_name)
        例如
            创建class1集合
            db.createCollection(class1)

    方法2
        当向一个集合中插入数据的时候，如果集合不存在则自动创建
        db.collection_name.insert(...)


### 查看数据库中集合
    show collections


### 集合命名规则
    1. 合法的utf-8字符
    2. 不能有\0
    3. 不能以system.开头，因为这个系统保留集合前缀
    4. 不能和关键字重名


### 删除集合
    db.collection_name.drop()


### 集合的重命名
    db.collection_name.renameCollection('new_name')


### 文档
    mongodb中数据的组织形式 ---> 文档
    mongodb文档：
        是以键值对的形式组成的一组数据，类似python中字典描述数据的方式

    键: 即表示文档的域，表达了一个键值对的含义
        命名规则
            1. utf-8格式字符串
            2. 不能使用\0
            3. 一个文档中键不能重复
    值:
        即数据库文档存储的数据．
        ＊ 文档中键值对是有序的，文档中键值对严格区分大小写

        bson   --->  json　--->  Javascript


### 支持的类型
    类型              值
    整型              整数　１　２　３
    布尔类型           true false
    浮点型             小数
    Array             数组
    Date              时间日期
    Timestamp         时间戳
    String            字符串
    Symbol            特殊字符串
    Binary data       二进制字串
    Null              null空值
    Object            内部文档（对象）
    ObjectId          自动生成ID标记
    regex             正则字串
    code              js代码


    "_id" : ObjectId("5ba076bfcb98b3cae2e289db")

    _id: 当mongodb插入文档时如果不指定_id域则自动生成_id域．值如果不自己
        指定即会自动生成一个ObjectId值

    5ba076bfcb98b3cae2e289db
    24位，使用ObjectId经过算法处理保证其唯一性
    8位　　文档创建时间
    6位   机器ID
    4位　　进程id
    6位　　计数器


### 集合中的文档
    1. 集合中的文档不一定有相同的域
        * 个数不同
        * 域不相同
        * 数据类型不同

    2.　集合中的文档各自比较独立，相互并不影响


### 集合创建原则
    1. 集合中的文档要描述统一类事物
    2. 数据库中统一类数据尽量集中存放在相同的集合
    3. 集合中文档嵌套层数不要太多


### 插入文档
    bd.collection_name.insert()
        功能
            插入一个文档
        参数
            要插入的文档
        例如:
            插入单个文档
                db.collection_name.insert({'name': 'Lucy', 'age':18, 'sex': 'w'})

        * 插入操作中键可以不加引号
        * 查看插入结果db.collection_name.find()
        * _id值可以自己插入，但是不能重复

        插入多条文档
            db.collection_name.insert([{}, {}, {}])

    其他插入方法
        db.collection_name.insertOne({}) 插入一条记录
        db.collection_name.insertMany([{}, {}])  # 插入多条记录

    *** save插入文档
        db.collection_name.save()
            1. 如果正常插入和insert 用法相同
            2. 如果插入数据时是由_id域，且_id域存在时则会修改原有文档，如果该值不存在则正常插入


### 获取集合对象方法
    db.collection_name  ---> db.getCollection('collection_name')


作业
    1. 对'要求'问题进行总结，描述
    2. 练习数据库的创建删除，集合创建删除
    3. 练习题数据库插入操作
    4. 复习mysql基本增删改查操作






