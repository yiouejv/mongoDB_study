固定集合
    mongodb中可以创建大小固定的集合

    特点
        能够淘汰早期数据
        插入和顺序查找的速度更快
        可以控制集合的空间大小
    使用
        临时缓冲
        日志处理
    创建固定集合
        db.createCollection(collection, {capped:true,size:10000,max:1000})
        参数
            capped: 表示创建固定集合
            size: 表示指定集合的大小, 字节
            max： 指定集合存放文档上限
        示例
            创建固定集合，size为1000,最多存3条文档
            db.createCollection('log', {capped:true,size:1000,max:3})

文件存储
    1. 存储文件路径
         db.log.insert(filename:'test.mp4', size:247.8, path:'/home/tarena/mongo/text.mp4')
        优点：
            节省数据库空间，操作简单快捷
        缺点
            当数据库或者文件或者发生变化时需要修改数据库内容

    2. 存储文件本身
        将文件以二进制的形式存储到数据库中
        优点
            数据库在文件就在，不会受到迁移等影响
        缺点
            占用数据库空间大，存取效率低

存储大文件
    GridFS 存储大文件

    大文件：
        在mongodb中认为大于16兆的文件为大文件

    GridFS 方法
        Grid 网格
        在mongodb中以两个集合配合的方法存储文件
            fs.files      存储文件相关信息（文件名，文件类型）
            fs.chunks     分块存储文件实际内容

    存储文件
        mongofiles -d dbname put file

            dbname: 要将文件存入的数据库，如果不存在自动创建
            file: 要保存的文件
        例如
           将test.mp4存入grids数据库
           mongofiles -d grid put test.mp4

    提取文件
        mongodb -d dbname get file
        例如
            mongofile -d grid get test.mp4
        优点
            操作方便，提供较好的存储命令，使用数据库存储文件方便移植
        缺点
            读写效率低

游标cursor
    通过获取操作数据库返回结果，得到返回结果对象
    通过游标可以进一步获取操作结果数据

    将返回结果赋给一个js变量，作为查找结果游标
        var cursor = db.connection.find()

    查看是否有下一个结果
        cursor.hasNext()

    获取下一个结果
        cursor.next()


### python 与 mongodb交互
    pymongo
        安装sudo pip3 install pymongo

    操作步骤
        1. 创建mongodb的数据库链接对象
            conn = pymongo.MongoClient('localhost', 27017)

        2. 生成数据库对象(__setitem__, __getitem__)
            db = conn.stu
            或
            db = conn['stu']

        3. 生成集合对象
            myset = db.collection
            或
            myset = db['collection']

        4. 进行集合操作（增删改查索引聚合）

        5. 关闭数据库链接
            conn.close


    插入操作
        insert()
        insert_one()
        insert_many()
        # id相同则修改，不同则插入
        save()

    查找操作
        find()
            功能
                查找数据库内容
            参数
                同mongo shell find()
            返回值
                返回一个结果游标对象
       find_one()
            功能
                查询第一条符合条件的数据
            参数
                同find()
            返回值
                返回一个字典

       *在pymongo 中所有操作符的用法同mongo shell相同，只是
       操作时加引号，以字符串的方式写入python代码
       示例
           cursor = myset.find({'age':{'$gt':18}},{'_id':0})


   ###
   cursor 对象的属性
       next()
       limit()
            myset.skip(1).limit(3):
       skip()
       count()
       sort()
            pymongo
                myset.sort([('age',1), ('name',-1)]):
            mongo shell
                sort({'age'：1, 'name':-1})

        myset.find({'$or':[{'age':{'$lt':19}}, {'sex':'女'}]},{})

   ***使用for或者是next使游标位置不再指向开头位置的时候，调用limit, skip, sort就会报错

    修改操作
        update(query, update, upsert=false, multi=false)
        示例
            mongo_update

    删除操作
        remove(qusery, multi=True)
        multi 默认是True表示删除所有query过滤文档
        设置False表示只删除第一个

        ＊(python中)True  == true(mongo shell)
        ＊(python中)False  == false(mongo shell)
        ＊(python中)None  == null(mongo shell)

    索引操作
        ensure_index()
        list_indexes()
        drop_index()
        drop_indexes()

    聚合操作
        aggregate()
        参数
            和mongo shell一样
        返回
            返回和find()函数相同的游标对象


练习
    grade 数据库，　class集合
    1. 为所有人添加分数域
        {'chinese': 88, 'math': 77, 'english': 78}

    2. 按照性别分组统计每组人数

    3. 统计每名男生的语文成绩

    4. 将女生按照英语成绩降序排列


# 文件操作
    pymongo 实现gridfs存储

    import gridfs
    GridFS()
    功能
        生成grid数据库对象



    import bson
    bson.binary.Binary()
    功能
        将bytes格式子串转换为mongodb的二进制存储格式




